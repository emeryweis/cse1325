====================
HOMEWORK P07 RESULTS
EMERY WEIS
1001534748
====================

Spring 2024


FULL CREDIT
===========

NOTE: These are measurements which may vary plus your opinions which may vary a LOT. We won't grade for "correctness", just completeness.

QUESTION 1: What Factor command line arguments did you use to achieve a 30 to 60 second runtime? Note: We're only interested in the "real" seconds for this question.

time java Factor 13 12341983591308976832 12341983591308976837 12341983591308976836 12341983591308976832 12341983591308976837 140136045666459146415 12341983591308976836 140136045666459146416 409691109030485036291143 409691109030485036291142 115342773083375138441712 478713804955782741640 8726382779747718874009


QUESTION 2: Provide the full output (including the time command) for your program, with 1 to 16 threads. **Ensure that the result is the same for all 16 runs.** (The order of the solutions may vary.) With bash, you can run all of these with a single command if you like, adding whatever Factor command line arguments you identified in QUESTION 1: 

for i in {1..16} ; do time java Factor $i *bigint1* ... *bigintn* ; done



emery@emerysgrcounter P07 % time java Factor 2 12341983591308976832 12341983591308976837 12341983591308976836 12341983591308976832 12341983591308976837 140136045666459146415 12341983591308976836 140136045666459146416 409691109030485036291143 409691109030485036291142 115342773083375138441712 478713804955782741640 8726382779747718874009
Thread 0 solving 0-5
Thread 1 solving 6-12
2 * 2 * 2 * 2 * 2 * 2 * 107827 * 294043 * 6082283 = 12341983591308976832
461 * 8069 * 950639 * 3490187 = 12341983591308976837
2 * 2 * 3 * 7 * 11 * 19 * 21119213 * 33287537 = 12341983591308976836
2 * 2 * 2 * 2 * 2 * 2 * 107827 * 294043 * 6082283 = 12341983591308976832
461 * 8069 * 950639 * 3490187 = 12341983591308976837
3 * 3 * 5 * 70981 * 2347001 * 18693127 = 140136045666459146415
2 * 2 * 3 * 7 * 11 * 19 * 21119213 * 33287537 = 12341983591308976836
2 * 2 * 2 * 2 * 7 * 7 * 19 * 127 * 311 * 2711 * 87859063 = 140136045666459146416
131 * 9413 * 18869 * 944143 * 18649643 = 409691109030485036291143
2 * 3 * 23 * 83 * 3607 * 31159 * 295111 * 1078411 = 409691109030485036291142
2 * 2 * 2 * 2 * 3 * 3 * 11 * 13 * 17 * 991 * 4125311 * 80595833 = 115342773083375138441712
2 * 2 * 2 * 5 * 17 * 4327 * 11498111 * 14149909 = 478713804955782741640
13 * 103 * 113 * 152469607 * 378261341 = 8726382779747718874009
java Factor 2 12341983591308976832 12341983591308976837 12341983591308976836   

40.45s user 
0.60s system 
100% cpu 
40.788 total



QUESTION 3: Does adding more threads continue to speed up the program? Do more threads ever slow down the program slightly?  Why or why not?

I assume that more threads would speed up the process, but my program may not be running correctly.
I don't think more threads would make the program take longer. I think there may be a limit to how
quickly the program would run though.






QUESTION 4: Does adding more threads increase the "system load", or is it constant regardless of the number of threads?  Why?

I think the system load stays constant since the threads aren't really running simulataneously but rather
pausing briefly to allow other threads to run.







BONUS
=====

QUESTION 5: Time your version of Factor as you did for the full credit version. Is this additional layer of threading faster, slower, or roughly equivalent in performance? Why?





YOUR Timing: